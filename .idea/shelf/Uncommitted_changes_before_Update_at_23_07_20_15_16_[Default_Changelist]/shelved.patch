Index: admin-interface-frontend/src/components/FragmentationModal.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><template>\n  <vl-layout>\n    <vl-grid mod-stacked>\n      <vl-column>\n        <vl-modal id=\"fragmentation-modal\">\n          <vl-form-grid>\n            <vl-form-validation-observer slim v-slot=\"{ handleSubmit, errors, invalid}\">\n              <vl-column>\n                <vl-title tag-name=\"h2\">New Fragmentation</vl-title>\n                <vl-form-message-label for=\"input-field-stream-name\">\n                  What name do you want to give the\n                  Fragmentation?\n                </vl-form-message-label>\n                <br />\n                <span>{{domainName}}</span>\n                <vl-form-validation\n                  rules=\"required\"\n                  name=\"fragmentation name\"\n                  v-slot=\"{ errors, classes }\"\n                >\n                  <vl-form-message-error v-if=\"errors\">{{errors[0]}}</vl-form-message-error>\n                  <vl-input-field\n                    :class=\"classes\"\n                    id=\"input-field-fragmentation-name\"\n                    name=\"input-field-fragmentation-name\"\n                    v-model=\"fragmentationName\"\n                  ></vl-input-field>\n                </vl-form-validation>\n              </vl-column>\n\n              <vl-column>\n                <vl-form-message-label>Fragmentation strategy</vl-form-message-label>\n                <vl-form-validation\n                  rules=\"required\"\n                  name=\"fragmentation strategy\"\n                  v-slot=\"{ errors, classes } \"\n                >\n                    <vl-form-message-error v-if=\"errors\">{{ errors[0] }}</vl-form-message-error>\n                    <vl-radio-tile\n                    v-for=\"(strategy, index) in strategies\"\n                    :key=\"strategy.text\"\n                    :class=\"classes\"\n                    v-model=\"selectedStrategy\"\n                    :name=\"'radio-tile-name-strategy' + index\"\n                    :value=\"strategy.value\"\n                    :id=\"'vl-radio-tile-strategy' + index\"\n                    :title=\"strategy.text\"\n                    ></vl-radio-tile>\n                </vl-form-validation>\n              </vl-column>\n\n              <vl-column>\n                <vl-form-message-label>Property</vl-form-message-label>\n                <vl-form-validation\n                  rules=\"required\"\n                  name=\"fragmentation property\"\n                  v-slot=\"{ errors, classes } \"\n                >\n                    <vl-form-message-error v-if=\"errors\">{{ errors[0] }}</vl-form-message-error>\n                    <vl-radio-tile\n                    v-for=\"(property, index) in properties\"\n                    :key=\"property.text\"\n                    :class=\"classes\"\n                    v-model=\"selectedProperty\"\n                    :name=\"'radio-tile-name-property' + index\"\n                    :value=\"{uri: property.value[property.value.length - 1], name: property.text}\"\n                    :id=\"'vl-radio-tile-property' + index\"\n                    :title=\"property.text\"\n                    ></vl-radio-tile>\n                </vl-form-validation>\n              </vl-column>\n\n              <vl-column>\n                <vl-action-group mod-align-right>\n                  <vl-button @click=\"emptyFields\" mod-secondary v-vl-modal-toggle=\"'fragmentation-modal'\">Cancel</vl-button>\n                  <template>\n                    <vl-button v-if=\"invalid\" mod-disabled v-vl-modal-toggle=\"'fragmentation-modal'\">Add</vl-button>\n                    <vl-button\n                      v-else\n                      @click=\"addFragmentation\"\n                      v-vl-modal-toggle=\"'fragmentation-modal'\"\n                    >Add</vl-button>\n                  </template>\n                </vl-action-group>\n              </vl-column>\n            </vl-form-validation-observer>\n          </vl-form-grid>\n        </vl-modal>\n      </vl-column>\n    </vl-grid>\n  </vl-layout>\n</template>\n\n<script>\n    export default {\n        name: \"FragmentationModal\",\n        data() {\n            var domainName = \"\";\n            var fragmentationName;\n            var properties = [];\n            var strategies = [\n              {text: \"PREFIX\", value: \"PREFIX\"},\n              {text: \"SUFFIX\", value: \"SUFFIX\"},\n              {text: \"NGRAM - minLength: 2, maxLength: 4\", value: \"NGRAM\"},\n              {text: \"TIME_INTERVAL - interval: 20 min\", value: \"TIME_INTERVAL\"},\n              {text: \"XYZ_TILE\", value: \"XYZ_TILE\"},\n              {text: \"IDENTITY\", value: \"IDENTITY\"},\n            ];\n            var selectedProperty;\n            var selectedStrategy;\n            return {\n                domainName,\n                fragmentationName,\n                properties,\n                strategies,\n                selectedProperty,\n                selectedStrategy\n            };\n        },\n        created() {\n            this.loadProperties(this.$route.query.eventStreamName)\n            this.loadDomain()\n        },\n        methods: {\n            loadDomain: async function () {\n                const response = await fetch(\n                    `http://localhost:3000/domain`\n                );\n                const data = await response.json();\n                console.log(data)\n                this.domainName = data\n            },\n            loadProperties: async function (name) {\n                const response = await fetch(\n                    `http://localhost:3000/streams/${name}`\n                );\n                const data = await response.json();\n                console.log(data)\n                data.properties.forEach(prop => {\n                    this.properties.push({text: prop.text, value: prop.value});\n                });\n            },\n            addFragmentation: async function () {\n                const response = await fetch(`http://localhost:3000/streams/${this.$route.query.eventStreamName}/fragmentations`, {\n                    method: \"post\",\n                    body: JSON.stringify({\n                        name: this.fragmentationName,\n                        strategy: this.selectedStrategy,\n                        property: encodeURIComponent(this.selectedProperty.uri),\n                        propertyLabel: this.selectedProperty.name\n                    }),\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n                const data = await response.json();\n                console.log(data)\n                if (!data.status === \"success\") {\n                    console.log(\"An error occurred when adding the fragmentation\");\n                } else {\n                    this.emptyFields();\n                }\n\n                await this.$emit(\"getFragmentations\", this.$route.query.eventStreamName)\n            },\n            emptyFields: function(){\n              this.fragmentationName = \"\"\n                    this.selectedProperty = ''\n                    this.selectedStrategy = ''\n            }\n\n        },\n};\n</script>\n\n<style scoped>\n</style>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- admin-interface-frontend/src/components/FragmentationModal.vue	(revision 73260478881cfa79668c0ffc1cb3dd61f4960d4a)
+++ admin-interface-frontend/src/components/FragmentationModal.vue	(date 1595510190387)
@@ -12,7 +12,7 @@
                   Fragmentation?
                 </vl-form-message-label>
                 <br />
-                <span>{{domainName}}</span>
+                <span>{{domainName}}/</span>
                 <vl-form-validation
                   rules="required"
                   name="fragmentation name"
@@ -117,19 +117,11 @@
                 selectedStrategy
             };
         },
-        created() {
+        mounted() {
             this.loadProperties(this.$route.query.eventStreamName)
-            this.loadDomain()
+            this.domainName = process.env.VUE_APP_BACKEND_DOMAIN
         },
         methods: {
-            loadDomain: async function () {
-                const response = await fetch(
-                    `http://localhost:3000/domain`
-                );
-                const data = await response.json();
-                console.log(data)
-                this.domainName = data
-            },
             loadProperties: async function (name) {
                 const response = await fetch(
                     `http://localhost:3000/streams/${name}`
Index: admin-interface-frontend/src/pages/Datastream.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><template>\n    <vl-layout>\n        <vl-grid mod-stacked>\n            <vl-column>\n                <vl-content-header\n                        mod-large\n                        mod-show-mobile\n                        :background=\"{\n                        src: 'https://source.unsplash.com/random/660x400',\n                        srcset: 'https://source.unsplash.com/random/1800x500 1x, https://source.unsplash.com/random/3100x1000 2x',\n                        alt: 'Content Header',\n                    }\"\n                >\n                    <div class=\"vl-content-header__logo-wrapper\">\n                        <vl-content-header-entity\n                                prefix=\"Vlaanderen\"\n                                title=\"Informatie Vlaanderen\"\n                                logo=\"true\"\n                                mod-small\n                        />\n                    </div>\n                    <div @click=\"goBack()\" class=\"Back\">\n                        <vl-content-header-title title=\"Fast and Slow\" tag-name=\"h1\"/>\n                    </div>\n                </vl-content-header>\n            </vl-column>\n\n            <vl-column>\n                <vl-button @click=\"goBack()\" class=\"Go-Back\" mod-secondary mod-narrow>Back</vl-button>\n            </vl-column>\n\n            <vl-column>\n                <vl-infoblock icon=\"list-bullets\" title=\"Collections\"></vl-infoblock>\n            </vl-column>\n            <vl-column width=\"9\">\n                <vl-action-group>\n                    <vl-dropdown-navigation :label=\"selectedStream\">\n                        <vl-link-list>\n                            <vl-link-list-item v-for=\"(stream, index) in streams\" :key=\"stream.name\">\n                                <vl-link @click=\"changeStream(index)\" mod-block href=\"#\">{{stream.name}}</vl-link>\n                            </vl-link-list-item>\n                        </vl-link-list>\n                    </vl-dropdown-navigation>\n                    <vl-button\n                            icon=\"file-edit\"\n                            mod-icon-before\n                            mod-narrow\n                            v-vl-modal-toggle=\"'editstream-modal'\"\n                            class=\"edit-button\"\n                    >Edit\n                    </vl-button>\n                </vl-action-group>\n            </vl-column>\n            <vl-column width=\"3\">\n                <vl-button\n                        icon=\"add\"\n                        mod-icon-before\n                        mod-narrow\n                        v-vl-modal-toggle=\"'fragmentation-modal'\"\n                        v-vl-positioning:float-right\n                >New fragmentation\n                </vl-button>\n            </vl-column>\n            <vl-column>\n                <vl-data-table mod-line>\n                    <thead>\n                    <tr>\n                        <th>Fragmentation strategy</th>\n                        <th>Property</th>\n                        <th>Endpoint</th>\n                        <th>Enabled</th>\n                        <th></th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr v-for=\"(fragmentation, index) of fragmentations\" :key=\"fragmentation.name\">\n                        <td>{{fragmentation.strategy}}</td>\n                        <td>{{fragmentation.property}}</td>\n                        <td>\n                            {{fragmentation.endpoint}}\n                        </td>\n                        <td v-if=\"!fragmentation.loading\">\n                            <vl-checkbox\n                                    :id=\"'checkbox-' + fragmentation\"\n                                    :name=\"'checkbox-name-' + fragmentation\"\n                                    v-model=\"fragmentation.enabled\"\n                                    :val=\"fragmentation.enabled\"\n                                    mod-switch\n                                    @input=\"enableFragmentation(fragmentation.enabled, fragmentation.name)\"\n                            ></vl-checkbox>\n                        </td>\n                        <td v-else>Loading</td>\n                        <td>\n                            <vl-button @click=\"deleteFragmentation(index)\" mod-narrow>Delete</vl-button>\n                        </td>\n                    </tr>\n                    </tbody>\n                </vl-data-table>\n            </vl-column>\n            <vl-column>\n                <EditStreamModal @getAllStreams=\"getAllStreams\"></EditStreamModal>\n            </vl-column>\n            <vl-column>\n                <FragmentationModal @getFragmentations=\"getFragmentations\"></FragmentationModal>\n            </vl-column>\n        </vl-grid>\n    </vl-layout>\n</template>\n\n<script>\n    import EditStreamModal from \"../components/EditStreamModal\";\n    import FragmentationModal from \"../components/FragmentationModal\";\n\n    export default {\n        name: \"Datastream\",\n        components: {EditStreamModal, FragmentationModal},\n        data() {\n            return {\n                streams: [],\n                fragmentations: [],\n                selectedStream: \"\",\n                fragInterval: null\n\n            }\n        },\n        created() {\n            this.getAllStreams(this.$route.query.eventStreamName);\n            this.getFragmentations(this.$route.query.eventStreamName);\n            this.fragInterval = setInterval(() => this.getFragmentations(this.$route.query.eventStreamName), 1000 * 15);\n\n        },\n        beforeDestroy() {\n            clearInterval(this.fragInterval)\n        },\n        methods: {\n            deleteFragmentation(index) {\n                this.fragmentations.splice(index, 1);\n            },\n            changeStream(index) {\n                this.selectedStream = this.streams[index].name;\n                const encodedUrl = \"/streams?eventStreamName=\" + this.streams[index].name\n                this.$router.push(encodedUrl)\n            },\n            goBack() {\n                return this.$router.push('/');\n            },\n\n            getFragmentations: async function (name) {\n                const response = await fetch(\n                    `${process.env.VUE_APP_BACKEND_DOMAIN || \"http://localhost:3000\"}/streams/${name}/fragmentations`\n                );\n                const data = await response.json();\n                console.log(data)\n                this.fragmentations = [];\n                data.forEach(frag => {\n                    let endpoint = `${process.env.VUE_APP_BACKEND_DOMAIN || \"http://localhost:3000\"}/data/stream/${name}/fragmentations/${frag.name}`.replace(' ', '_').toLowerCase()\n                    this.fragmentations.push({\n                        endpoint: endpoint,\n                        strategy: frag.kind,\n                        name: frag.name,\n                        property: frag.params.propertyLabel,\n                        enabled: (frag.status === \"ENABLED\"),\n                        loading: frag.status === \"LOADING\"\n                    });\n                });\n            },\n            enableFragmentation: async function (state, fragName) {\n                console.log(state, fragName)\n                const response = await fetch(\n                    `${process.env.VUE_APP_BACKEND_DOMAIN || \"http://localhost:3000\"}/streams/${this.$route.query.eventStreamName}/fragmentations/${fragName}/enable`,\n                    {\n                        method: \"post\",\n                        body: JSON.stringify({\n                            enabled: String(state)\n                        }),\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        }\n                    }\n                );\n                const data = await response.json();\n                console.log(data)\n                if (!data.status === \"success\") {\n                    console.log(\n                        \"An error occurred changing the status of the fragmentation\"\n                    );\n                }\n                await this.getFragmentations(this.$route.query.eventStreamName)\n            },\n            getAllStreams: async function (name) {\n                const response = await fetch(`${process.env.VUE_APP_BACKEND_DOMAIN || \"http://localhost:3000\"}/streams`);\n                const data = await response.json();\n\n                this.streams = [];\n                for (const item in data) {\n                    let add_stream = {\n                        name: data[item].name,\n                        url: data[item].sourceURI\n                    }\n                    this.streams.push(add_stream);\n                    if (add_stream.name === name) {\n                        this.selectedStream = add_stream.name\n                    }\n                }\n            },\n            toggleInput: function (id) {\n                this.$refs[id][0].$vnode.elm.disabled = false;\n            }\n        }\n    };\n</script>\n\n<style lang=\"scss\">\n    span.vl-icon.vl-vi.vl-vi-up-down-arrows {\n        justify-content: start !important;\n    }\n\n    .Go-Back {\n        margin-top: 1.5rem;\n    }\n\n    .Go-Back {\n        margin-top: 1.5rem;\n    }\n\n    div.Back:hover {\n        cursor: pointer;\n    }\n\n    .edit-button {\n        margin-top: -3rem;\n    }\n</style>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- admin-interface-frontend/src/pages/Datastream.vue	(revision 73260478881cfa79668c0ffc1cb3dd61f4960d4a)
+++ admin-interface-frontend/src/pages/Datastream.vue	(date 1595509792350)
@@ -62,6 +62,9 @@
                 </vl-button>
             </vl-column>
             <vl-column>
+                <strong>Datastream:</strong> <vl-link :href="this.streamURL" target="_blank">{{decodeURI(this.streamURL)}}</vl-link>
+            </vl-column>
+            <vl-column>
                 <vl-data-table mod-line>
                     <thead>
                     <tr>
@@ -77,7 +80,7 @@
                         <td>{{fragmentation.strategy}}</td>
                         <td>{{fragmentation.property}}</td>
                         <td>
-                            {{fragmentation.endpoint}}
+                            <vl-link :href="fragmentation.endpoint" target="_blank">{{decodeURI(fragmentation.endpoint)}}</vl-link>
                         </td>
                         <td v-if="!fragmentation.loading">
                             <vl-checkbox
@@ -119,11 +122,13 @@
                 streams: [],
                 fragmentations: [],
                 selectedStream: "",
-                fragInterval: null
+                fragInterval: null,
+                streamURL: ""
 
             }
         },
         created() {
+            this.streamURL = encodeURI(`${process.env.VUE_APP_BACKEND_DOMAIN || "http://localhost:3000"}/data/${this.$route.query.eventStreamName}`)
             this.getAllStreams(this.$route.query.eventStreamName);
             this.getFragmentations(this.$route.query.eventStreamName);
             this.fragInterval = setInterval(() => this.getFragmentations(this.$route.query.eventStreamName), 1000 * 15);
@@ -153,7 +158,7 @@
                 console.log(data)
                 this.fragmentations = [];
                 data.forEach(frag => {
-                    let endpoint = `${process.env.VUE_APP_BACKEND_DOMAIN || "http://localhost:3000"}/data/stream/${name}/fragmentations/${frag.name}`.replace(' ', '_').toLowerCase()
+                    let endpoint = encodeURI(`${process.env.VUE_APP_BACKEND_DOMAIN || "http://localhost:3000"}/data/${name}/${frag.name}`)
                     this.fragmentations.push({
                         endpoint: endpoint,
                         strategy: frag.kind,
